name: Testing

on:
  issue_comment:
    types: [created]

jobs:
    setup:
        if: ${{ github.event.issue.pull_request && startsWith(github.event.comment.body, '/prefix') }}
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v3
          with:
            fetch-depth: 0
        - uses: actions/github-script@v7
          id: workspace-parser
          with:
            result-encoding: string
            script: |
                const str = context.payload.comment.body;
                const wsStr = str.replace('/prefix', '').trim().split(',').filter(x => x.length !== 0).map(x => x.trim());
                const req = {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: context.payload.comment.id,
                }

                console.log('jake context', context);
                console.log('jake req obj', req)
                
                if (!wsStr || wsStr.length === 0) {
                  core.setFailed(`No ws names provided. Please be sure the format of your comment is correct.`);
                  github.rest.issues.updateComment({
                    ...req,
                    body: `${str}\n\n:fire: No workspace provided!`,
                  });
                }

                // validate string
                const allowed = ['one', 'two', 'three'];
                if (!wsStr.every(x => allowed.includes(x))) {
                  core.setFailed(`Invalid ws name provided, valid options are "${allowed.join(', ')}", provided: "${wsStr.join(', ')}"`);
                  github.rest.issues.updateComment({
                    ...req,
                    body: `${str}\n\n:fire: Invalid workspace provided!`,
                  });
                }

                github.rest.issues.updateComment({
                  ...req,
                  body: `${str}\n\n:popcorn: Deployment Complete!`,
                });
                return wsStr.map(x => x.trim()).join(' ');
        - name: Get Results
          run: echo "${{steps.workspace-parser.outputs.result}}"